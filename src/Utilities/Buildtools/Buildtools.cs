using Buildtools.Configuration;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices.ComTypes;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Buildtools
{
    public static class Buildtools
    {
        private static char filePathSlash = Environment.OSVersion.Platform == PlatformID.Win32NT ? '\\' : '/';
        private static bool singleBuild = false;
        private static bool errorOccurredDuringBuild = false;

        private static DirectoryInfo srcDirectory;
        private static Configuration.Buildtools configuration;
        private static List<CommandExecuter> runningCommandExecuter = new List<CommandExecuter>();
        private static List<FileMover> runningFileMover = new List<FileMover>();
        private static List<Task> runningTasks = new List<Task>();

        private static string autoGeneratedFileWarning;
        private static JsonSerializerSettings jsonSerializerSettings = new JsonSerializerSettings()
        {
            Formatting = Formatting.Indented,
            NullValueHandling = NullValueHandling.Ignore
        };

        public static bool Running { get; private set; } = true;

        static int Main(string[] args)
        {
            ProcessArguments(args);

            Console.OutputEncoding = Encoding.UTF8;

            srcDirectory = new DirectoryInfo(Environment.CurrentDirectory);
            while(srcDirectory != null)
            {
                if(srcDirectory.Name == "src")
                {
                    if(srcDirectory.GetDirectories("Scss", SearchOption.TopDirectoryOnly).Length == 1 &&
                        srcDirectory.GetDirectories("TypeScript", SearchOption.TopDirectoryOnly).Length == 1 &&
                        srcDirectory.GetDirectories("Utilities", SearchOption.TopDirectoryOnly).Length == 1)
                    {
                        break;
                    }
                }
                srcDirectory = srcDirectory.Parent;
            }

            if(srcDirectory == null)
            {
                Console.WriteLine("Can't find 'src' directory!");
                Console.WriteLine("Please set the working directory of this tool inside the 'src' directory or one of its children.");
                errorOccurredDuringBuild = true;
            }
            else if(SearchNodePackages())
            {
                LoadConfiguration();
                AutoGeneratedFileWarning();

                WriteUIXConfiguration();

                Configuration.Buildtools.ESVersion[] additionalVersions = new Configuration.Buildtools.ESVersion[]
                {
                    //Configuration.Buildtools.ESVersion.ES2016,
                    //Configuration.Buildtools.ESVersion.ES2020
                };

                AddTscTask("UIX", TSConfig.BuildTarget.Browser, additionalVersions);
                AddTscTask("UIX.ServiceWorker", TSConfig.BuildTarget.ServiceWorker);
                AddTscTask("UIX.AjaxWorker", TSConfig.BuildTarget.WebWorker, additionalVersions);

                AddSassTask();

                StartFileMover();

                runningTasks.Add(Task.Factory.StartNew(async () =>
                {
                    string line;
                    int runAfterExit = 2;
                    while (runAfterExit-- != 0)
                    {
                        foreach(CommandExecuter commandExecuter in runningCommandExecuter)
                        {
                            while((line = commandExecuter.ReadLine()) != null)
                            {
                                if (!string.IsNullOrWhiteSpace(line))
                                {
                                    if (string.IsNullOrWhiteSpace(commandExecuter.Name))
                                    {
                                        Console.Write(line);
                                    }
                                    else
                                    {
                                        Console.Write(commandExecuter.Name + ": " + line);
                                    }
                                }
                            }
                        }
                        await Task.Delay(25);
                        if (Running)
                        {
                            runAfterExit++;
                        }
                    }
                }, TaskCreationOptions.AttachedToParent));
            }

            if (errorOccurredDuringBuild)
            {
                return 1;
            }

            if (singleBuild)
            {
                List<CommandExecuter> runningCommandExecuterCopy = new List<CommandExecuter>(runningCommandExecuter);

                void checkRunningCommandExecuterCopy()
                {
                    while (runningCommandExecuterCopy.Count > 0)
                    {
                        for (int i = 0; i < runningCommandExecuterCopy.Count; i++)
                        {
                            if (runningCommandExecuterCopy[i].Status != CommandExecuter.StatusType.Running)
                            {
                                if (runningCommandExecuterCopy[i].Status == CommandExecuter.StatusType.ErrorOccurred)
                                {
                                    errorOccurredDuringBuild = true;
                                    Console.WriteLine(">>> error occurred in '" + runningCommandExecuterCopy[i].Name + "' <<<");
                                }
                                else
                                {
                                    Console.WriteLine(">>> '" + runningCommandExecuterCopy[i].Name + "' finished successfully <<<");
                                }
                                runningCommandExecuterCopy.RemoveAt(i--);
                            }
                        }
                        Task.Delay(100).Wait();
                    }
                }
                checkRunningCommandExecuterCopy();

                Task.Delay(500);
                runningCommandExecuterCopy.Add(RunPostCSS());
                checkRunningCommandExecuterCopy();

                Running = false;
                foreach (FileMover fileMover in runningFileMover)
                {
                    fileMover.Stop();
                }
                Task.WaitAll(runningTasks.ToArray(), TimeSpan.FromSeconds(10));
            }
            else
            {
                Console.ReadLine();
            }

            return errorOccurredDuringBuild ? 1 : 0;
        }

        private static void ProcessArguments(string[] args)
        {
            if(args != null)
            {
                foreach(string arg in args)
                {
                    if (arg?.ToLower().Contains('b') == true)
                    {
                        singleBuild = true;
                    }
                }
            }
            if (!singleBuild)
            {
                Console.WriteLine("(You can also run this tool in single build mode with the argument '-b')");
            }
        }

        private static bool SearchNodePackages()
        {
            if(CommandExecuter.GetFileInfo("npm") == null)
            {
                Console.WriteLine("Can't find Node.js and npm!");
                errorOccurredDuringBuild = true;
                return false;
            }
            if (CommandExecuter.GetFileInfo("tsc") == null)
            {
                Console.WriteLine("Can't find 'tsc'! You can install it with: 'npm install -g typescript'");
                errorOccurredDuringBuild = true;
                return false;
            }
            if (CommandExecuter.GetFileInfo("sass") == null)
            {
                Console.WriteLine("Can't find 'sass'! You can install it with: 'npm install -g sass'");
                errorOccurredDuringBuild = true;
                return false;
            }
            if (CommandExecuter.GetFileInfo("autoprefixer") == null)
            {
                Console.WriteLine("Can't find 'autoprefixer'! You can install it with: 'npm install -g autoprefixer'");
                errorOccurredDuringBuild = true;
                return false;
            }
            if (CommandExecuter.GetFileInfo("postcss") == null)
            {
                Console.WriteLine("Can't find 'postcss'! You can install it with: 'npm install -g postcss postcss-cli'");
                Console.WriteLine("Also make sure you have installed 'cssnano', 'postcss-cssnext' and 'caniuse-lite'. You can install it with: 'npm install -g caniuse-lite cssnano postcss-cssnext'");
                errorOccurredDuringBuild = true;
                return false;
            }
            return true;
        }
    
        private static void LoadConfiguration()
        {
            FileInfo configFile = new FileInfo(srcDirectory.FullName + filePathSlash + "Utilities" + filePathSlash + "Buildtools.config.json");
            if (configFile.Exists)
            {
                try
                {
                    Console.WriteLine("Loding configuration from: " + configFile.FullName);
                    configuration = JsonConvert.DeserializeObject<Configuration.Buildtools>(File.ReadAllText(configFile.FullName));
                }
                catch (Exception e){
                    Console.WriteLine("There was an exception while reading the configuration file!");
                    Console.WriteLine();
                    Console.WriteLine(e);
                    Console.WriteLine();
                }
            }
            if(configuration == null)
            {
                configuration = new Configuration.Buildtools();
                Console.WriteLine("Writing default configuration to: " + configFile.FullName);
            }
            if (configFile.Exists)
            {
                configFile.Delete();
            }else if (!configFile.Directory.Exists)
            {
                configFile.Directory.Create();
            }
            File.WriteAllText(configFile.FullName, JsonConvert.SerializeObject(configuration, Formatting.Indented));
        }

        private static void AutoGeneratedFileWarning()
        {
            Uri rootUri = new Uri(srcDirectory.FullName, UriKind.Absolute);
            string applicationUri = rootUri.MakeRelativeUri(new Uri(AppDomain.CurrentDomain.BaseDirectory, UriKind.Absolute)).ToString();
            string configurationUri = rootUri.MakeRelativeUri(new Uri(srcDirectory.FullName + filePathSlash + "Utilities" + filePathSlash + "Buildtools.config.json", UriKind.Absolute)).ToString();
            autoGeneratedFileWarning =
@"//------------------------------------------------------------------------------
// <auto-generated>
//    This file was generated by the provided buildtools.
//    (Time of creation: " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + @")
//
//    Changes to this file may cause incorrect behavior and will be lost if
//    the code is regenerated.
//
//    This tool was last located at: '"+ applicationUri + @"'. 
//    The configuration for it is located at: '"+ configurationUri + @"'. 
// </auto-generated>
//------------------------------------------------------------------------------

";
        }

        private static void AddTscTask(string name, TSConfig.BuildTarget buildTarget, params Configuration.Buildtools.ESVersion[] additionalVersions)
        {
            string buildFolder = "./../../../build/" + (buildTarget == TSConfig.BuildTarget.ServiceWorker ? "" : "js/");

            for (int i = -1; i < additionalVersions.Length; i++)
            {
                string workingDirectory = srcDirectory.FullName + filePathSlash + "TypeScript" + filePathSlash + (i == -1 ? name : ".tsconfig");


                string versionName = i == -1 ? name : name + "." + additionalVersions[i];
                
                TSConfig tsConfig = configuration.GenerateTSConfig(buildFolder + (i == -1 ? "" : additionalVersions[i].ToString() + "/")+ versionName + ".js", buildTarget, i == -1 ? (Configuration.Buildtools.ESVersion?)null : additionalVersions[i], i == -1 ? null : "./../" + name + "/**/*");
                FileInfo tsConfigFile = new FileInfo(workingDirectory + filePathSlash + (i == -1 ? "tsconfig" : versionName) + ".json");

                if (tsConfigFile.Exists)
                {
                    tsConfigFile.Delete();
                }else if (!tsConfigFile.Directory.Exists)
                {
                    tsConfigFile.Directory.Create();
                }

                File.WriteAllText(tsConfigFile.FullName, autoGeneratedFileWarning + JsonConvert.SerializeObject(tsConfig, jsonSerializerSettings));

                string arguments = "--build" + (i == -1 ? "" : " " + versionName + ".json") + (singleBuild ? "" : " --watch");
                runningCommandExecuter.Add(new CommandExecuter("tsc", arguments, new DirectoryInfo(workingDirectory), "tsc(" + versionName + ")", i == -1 ? false : configuration.MuteAdditionalVersionsOutput));
            }

        }

        private static void AddSassTask()
        {
            StringBuilder argument = new StringBuilder("./Scss:./../build/css");
            if (configuration.BuildInRelease || configuration.Sass.Compress)
            {
                argument.Append(" --style=compressed");
            }
            else
            {
                argument.Append(" --style=expanded");
            }
            if (configuration.Sass.SourceMap)
            {
                argument.Append(" --source-map --embed-sources");
            }
            if (!singleBuild)
            {
                argument.Append(" --watch");
            }
            runningCommandExecuter.Add(new CommandExecuter("sass", argument.ToString(), new DirectoryInfo(srcDirectory.FullName), "scss"));
        }
        
        private static void StartFileMover()
        {
            runningFileMover.Add(new FileMover(new DirectoryInfo(srcDirectory.Parent.FullName + filePathSlash + "build"), new DirectoryInfo(srcDirectory.Parent.FullName + filePathSlash + "build" + filePathSlash  + "sourceMap"), "*.js.map"));
            runningFileMover.Add(new FileMover(new DirectoryInfo(srcDirectory.Parent.FullName + filePathSlash + "build"), new DirectoryInfo(srcDirectory.Parent.FullName + filePathSlash + "build" + filePathSlash + "declaration"), "*.d.ts"));

            foreach (FileMover fileMover in runningFileMover)
            {
                runningTasks.Add(fileMover.MoverTask);
            }
        }
        
        private static CommandExecuter RunPostCSS()
        {
            StringBuilder argument = new StringBuilder("./../build/css/*.css --no-map");
            if (configuration.Sass.SourceMap)
            {
                argument.Append(" -m");
            }

            argument.Append(" -u");

            string[] plugins = new string[] {
                "cssnano",
                "postcss-cssnext"
            };

            foreach(string plugin in plugins)
            {
                argument.Append(" " + plugin);
            }

            argument.Append(" -r");

            CommandExecuter result;
            runningCommandExecuter.Add(result = new CommandExecuter("postcss", argument.ToString(), new DirectoryInfo(srcDirectory.FullName), "postCSS"));
            return result;
        }

        private static void WriteUIXConfiguration()
        {
            string workingDirectory = srcDirectory.FullName + filePathSlash + "TypeScript";

            FileInfo uixConfigurationFile = new FileInfo(workingDirectory + filePathSlash + "UIX.Configuration.ts");

            if (uixConfigurationFile.Exists)
            {
                uixConfigurationFile.Delete();
            }
            else if (!uixConfigurationFile.Directory.Exists)
            {
                uixConfigurationFile.Directory.Create();
            }

            string content = autoGeneratedFileWarning + 
                "const YER_TOOLS_UIX_CONFIGURATION = \n" + 
                JsonConvert.SerializeObject(new UIXConfiguration(configuration), jsonSerializerSettings);

            Console.WriteLine("Writing 'UIX.Configuration.ts' to: " + uixConfigurationFile.FullName);
            File.WriteAllText(uixConfigurationFile.FullName, content);
        }
    }
}