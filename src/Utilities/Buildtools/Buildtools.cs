/* Copyright (c) 2020 Felix Mayer (FelixM@yer.tools), yerTools */
using Buildtools.Configuration;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Buildtools
{
    public static class Buildtools
    {
        private static DirectoryInfo srcDirectory;
        private static Configuration.Buildtools configuration;
        private static List<CommandExecuter> runningCommandExecuter = new List<CommandExecuter>();
        private static string autoGeneratedFileWarning;
        private static JsonSerializerSettings jsonSerializerSettings = new JsonSerializerSettings()
        {
            Formatting = Formatting.Indented,
            NullValueHandling = NullValueHandling.Ignore
        };

        static void Main(string[] args)
        {
            Console.OutputEncoding = Encoding.Unicode;

            srcDirectory = new DirectoryInfo(Environment.CurrentDirectory);
            while(srcDirectory != null)
            {
                if(srcDirectory.Name == "src")
                {
                    if(srcDirectory.GetDirectories("Scss", SearchOption.TopDirectoryOnly).Length == 1 &&
                        srcDirectory.GetDirectories("TypeScript", SearchOption.TopDirectoryOnly).Length == 1 &&
                        srcDirectory.GetDirectories("Utilities", SearchOption.TopDirectoryOnly).Length == 1)
                    {
                        break;
                    }
                }
                srcDirectory = srcDirectory.Parent;
            }

            if(srcDirectory == null)
            {
                Console.WriteLine("Can't find 'src' directory!");
                Console.WriteLine("Please set the working directory of this tool inside the 'src' directory or one of its children.");
            }
            else if(SearchNodePackages())
            {
                LoadConfiguration();
                AutoGeneratedFileWarning();

                Configuration.Buildtools.ESVersion[] additionalVersions = new Configuration.Buildtools.ESVersion[]
                {
                    Configuration.Buildtools.ESVersion.ES2016,
                    Configuration.Buildtools.ESVersion.ES2020
                };

                AddTscTask("UIX", TSConfig.BuildTarget.Browser, additionalVersions);
                AddTscTask("UIX.ServiceWorker", TSConfig.BuildTarget.ServiceWorker);
                AddTscTask("UIX.AjaxWorker", TSConfig.BuildTarget.WebWorker, additionalVersions);

                AddSassTask();

                StartFileMover();
                
                Task.Factory.StartNew(async () =>
                {
                    string line;
                    while (true)
                    {
                        foreach(CommandExecuter commandExecuter in runningCommandExecuter)
                        {
                            while((line = commandExecuter.ReadLine()) != null)
                            {
                                if (!string.IsNullOrWhiteSpace(line))
                                {
                                    if (string.IsNullOrWhiteSpace(commandExecuter.Name))
                                    {
                                        Console.Write(line);
                                    }
                                    else
                                    {
                                        Console.Write(commandExecuter.Name + ": " + line);
                                    }
                                }
                            }
                        }
                        await Task.Delay(25);
                    }
                }, TaskCreationOptions.AttachedToParent);
            }

            Console.ReadLine();
        }

        private static bool SearchNodePackages()
        {
            if(CommandExecuter.GetFileInfo("npm") == null)
            {
                Console.WriteLine("Can't find Node.js and npm!");
                return false;
            }
            if (CommandExecuter.GetFileInfo("tsc") == null)
            {
                Console.WriteLine("Can't find 'tsc'! You can install it with: 'npm install -g typescript'");
                return false;
            }
            if (CommandExecuter.GetFileInfo("sass") == null)
            {
                Console.WriteLine("Can't find 'sass'! You can install it with: 'npm install -g sass'");
                return false;
            }
            return true;
        }
    
        private static void LoadConfiguration()
        {
            string configPath = srcDirectory.FullName + "\\Utilities\\Buildtools.config.json";
            if (File.Exists(configPath))
            {
                try
                {
                    Console.WriteLine("Loding configuration from: " + configPath);
                    configuration = JsonConvert.DeserializeObject<Configuration.Buildtools>(File.ReadAllText(configPath));
                }
                catch (Exception e){
                    Console.WriteLine("There was an exception while reading the configuration file!");
                    Console.WriteLine();
                    Console.WriteLine(e);
                    Console.WriteLine();
                }
            }
            if(configuration == null)
            {
                configuration = new Configuration.Buildtools();
                Console.WriteLine("Writing default configuration to: " + configPath);
            }
            File.WriteAllText(configPath, JsonConvert.SerializeObject(configuration, Formatting.Indented));
        }

        private static void AutoGeneratedFileWarning()
        {
            Uri rootUri = new Uri(srcDirectory.FullName, UriKind.Absolute);
            string applicationUri = rootUri.MakeRelativeUri(new Uri(AppDomain.CurrentDomain.BaseDirectory, UriKind.Absolute)).ToString();
            string configurationUri = rootUri.MakeRelativeUri(new Uri(srcDirectory.FullName + "\\Utilities\\Buildtools.config.json", UriKind.Absolute)).ToString();
            autoGeneratedFileWarning =
@"//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by the provided buildtools.
//
//    Changes to this file may cause incorrect behavior and will be lost if
//    the code is regenerated.
//
//    This tool was last located at: '"+ applicationUri + @"'. 
//    The configuration for it is located at: '"+ configurationUri + @"'. 
// </auto-generated>
//------------------------------------------------------------------------------

";
        }

        private static void AddTscTask(string name, TSConfig.BuildTarget buildTarget, params Configuration.Buildtools.ESVersion[] additionalVersions)
        {
            string buildFolder = "./../../../build/" + (buildTarget == TSConfig.BuildTarget.ServiceWorker ? "" : "js/");

            for (int i = -1; i < additionalVersions.Length; i++)
            {
                string workingDirectory = srcDirectory.FullName + "\\TypeScript\\" + (i == -1 ? name : ".tsconfig");


                string versionName = i == -1 ? name : name + "." + additionalVersions[i];
                
                TSConfig tsConfig = configuration.GenerateTSConfig(buildFolder + (i == -1 ? "" : additionalVersions[i].ToString() + "/")+ versionName + ".js", buildTarget, i == -1 ? (Configuration.Buildtools.ESVersion?)null : additionalVersions[i], i == -1 ? null : "./../" + name + "/**/*");
                File.WriteAllText(workingDirectory + "\\" + (i == -1 ? "tsconfig" : versionName) + ".json", autoGeneratedFileWarning + JsonConvert.SerializeObject(tsConfig, jsonSerializerSettings));

                string arguments = i == -1 ? null : "--build " + versionName + ".json --watch";
                runningCommandExecuter.Add(new CommandExecuter("tsc", arguments, new DirectoryInfo(workingDirectory), "tsc(" + versionName + ")", i == -1 ? false : configuration.MuteAdditionalVersionsOutput));
            }

        }

        private static void AddSassTask()
        {
            StringBuilder argument = new StringBuilder("./Scss:./../build/css");
            if (configuration.BuildInRelease || configuration.Sass.Compress)
            {
                argument.Append(" --style=compressed");
            }
            else
            {
                argument.Append(" --style=expanded");
            }
            if (!configuration.BuildInRelease && configuration.Sass.SourceMap)
            {
                argument.Append(" --source-map --embed-sources");
            }
            argument.Append(" --watch");
            runningCommandExecuter.Add(new CommandExecuter("sass", argument.ToString(), new DirectoryInfo(srcDirectory.FullName), "scss"));
        }
        
        private static void StartFileMover()
        {
            new FileMover(new DirectoryInfo(srcDirectory.Parent.FullName + "\\build"), new DirectoryInfo(srcDirectory.Parent.FullName + "\\build\\sourceMap"), "*.js.map");
            new FileMover(new DirectoryInfo(srcDirectory.Parent.FullName + "\\build"), new DirectoryInfo(srcDirectory.Parent.FullName + "\\build\\declaration"), "*.d.ts");
        }
    }
}

/*
 * Copyright (c) 2020 Felix Mayer (FelixM@yer.tools), yerTools
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */