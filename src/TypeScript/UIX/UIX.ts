/// (UIX.Configuration.ts is generated by the provided buildtools)
/// <reference path="../UIX.Configuration.ts" />

/// <reference path="Polyfill/Polyfills.ts" />
/// <reference path="Core/Static/Initialization.ts" />
/// <reference path="Localization/Index.ts" />

/// <reference path="Interface/AjaxInterface.ts" />
/// <reference path="Interface/ServiceWorkerInterface.ts" />

/// <reference path="Core/Tools/ClearCache.ts" />
/// <reference path="WidgetSystem/Render.ts" />

/// <reference path="Libraries/FormGenerator/FormFactory.ts" />

namespace UIX{
    if(!Core.Tools.ClearCache.clearCacheIfRequired()){
        const UIX_DEVELOPMENT_MODE = true;

        if(UIX_DEVELOPMENT_MODE){

            let randomFormChildren = (parent:Libraries.FormGenerator.Interface.IFormParent, count:number, maxCountPerLayer = 30, isFormGeneratorProbability = 0.1, maxLayers = 3, currentLayer = 1) => {
                let words = "the be to of and a in that have I it for not on with he as you do at this but his by from they we say her she or an will my one all would there their what so up out if about who get which go me when make can like time no just him know take people into year your good some could them see other than then now look only come its over think also back after use two how our work first well way even new want because any these give day most us".split(" ");

                let randomString = (capitalize = true, length = 1) => {
                
                    let word = words[Math.floor(Math.random() * words.length)];
                    if(capitalize){
                        word = word.substring(0,1).toUpperCase() + word.substring(1);
                    }
                    if(length > 1){
                        word += " " + randomString(false, length - 1);
                    }
                    return word;
                };

                let randomStringOrUndefined = (capitalize = true, length = 1, undefinedProbability = 0.3, addDot = false) => {
                    if(Math.random() < undefinedProbability){
                        return undefined;
                    }
                    return randomString(capitalize, length) + (addDot ? "." : "");
                };

                let children:Libraries.FormGenerator.Interface.IFormChild[] = [];

                for(let i = 0; i < count; i++){
                    if(Math.random() < isFormGeneratorProbability && currentLayer < maxLayers){
                        let formGenerator = new Libraries.FormGenerator.FormGenerator(
                            parent,
                            randomStringOrUndefined(true, Math.round(Math.random() * 10 + 1)),
                            randomStringOrUndefined(true, Math.round(Math.random() * 30 + 2), 0.75, true),
                            undefined,
                            i+"-");
                        formGenerator.addChildren(randomFormChildren(formGenerator, Math.floor(Math.random() * maxCountPerLayer + 1), maxCountPerLayer, isFormGeneratorProbability, maxLayers, currentLayer + 1));
                        children.push(formGenerator);
                    }else{
                        children.push(new Libraries.FormGenerator.Input.TextInput(
                            parent,
                            i+"",
                            Math.random() < 0.15,
                            randomStringOrUndefined(true, Math.round(Math.random() * 14 + 1), 0.6, true),
                            randomStringOrUndefined(true, Math.round(Math.random() * 6 + 1), 0.15),
                            randomStringOrUndefined(true, Math.round(Math.random() * 20 + 2), 0.8, true),
                            Math.random() < 0.4,
                            Math.random() < 0.2,
                            randomStringOrUndefined(true, Math.round(Math.random() * 18 + 1), 0.9)
                        ));
                    }
                }

                return children;
            };

            let formGenerator = Libraries.FormGenerator.FormFactory.create(factory => [

                //factory.form([
                    factory.form([
                        factory.textInput("firstName", false, undefined, "First Name"),
                        factory.textInput("lastName", false, undefined, "Last Name"),
                        factory.textInput("email", false, undefined, "E-Mail", undefined, false)
                    ], "Personal Data", "This are all your personal data, we need from you."),
    
                    factory.form([
                        factory.textInput("displayName", false, undefined, "Display Name", "This is the name on your profile."),
                        factory.passwordInput("password", "Choose your password", "Password", undefined, false),
                        factory.passwordInput("passwordConfirmation", "Confirm your password", "Password Confirmation", undefined, false)
                    ], "Account Information", "The information you input here will be visible for everyone.\n(Yes, also your password!)"),
    
                    factory.textInput("message", true, "Your message here", "Message"),

                    factory.form([
                        factory.textInput("address", false, undefined, "Address"),
                        factory.textInput("city", false, undefined, "City"),
                        factory.textInput("state", false, undefined, "State"),
                        factory.textInput("zip-code", false, undefined, "Zip Code"),
                        factory.textInput("phone", false, undefined, "Phone", undefined, false)
                    ], "Shipping Information", "We will send you a small gift.")

                //], "Demo Form", "This is a simple demo form. :)")

            ]).toFormGenerator();

            //formGenerator.addChildren(formGenerator, randomFormChildren(100));

            let formGeneratorHTML = formGenerator.getFormElement();
            document.body.appendChild(formGeneratorHTML);

            //WidgetSystem.Render.fallback();
        }else{
            let success = false;
            {
                let localStoredWebsite = localStorage.getItem("webpage");
                if(localStoredWebsite){
                    success = WidgetSystem.Render.fromJson(localStoredWebsite);
                }
            }
            if(!success){
                AjaxInterface.get("/Webpage.uix.json").then(response => {
                    if(response && response.wasSuccessfully){
                        success = WidgetSystem.Render.fromResponse(response);
                    }

                    if(!success){
                        AjaxInterface.get("https://uix.yer.tools/Webpage.uix.json").then(fallbackResponse => {
                            if(fallbackResponse && fallbackResponse.wasSuccessfully){
                                success = WidgetSystem.Render.fromResponse(fallbackResponse);
                            }
                            
                            if(!success && !WidgetSystem.Render.redirectToEditMode()){
                                WidgetSystem.Render.fallback();
                            }
                        });
                    }
                });
            }
        }
    }else{
        WidgetSystem.Render.clearingCacheMessage();
    }
}